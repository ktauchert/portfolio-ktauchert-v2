/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Mailbox: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
  };
};

export function Mailbox(props: React.ComponentProps<"group">) {
  const [hovering, setHovering] = React.useState(true);

  const { nodes, materials } = useGLTF("/Mailbox.glb") as unknown as GLTFResult;

  const ref = useRef<THREE.Group>(null);
  useFrame(() => {
    if (ref.current && hovering) {
      ref.current.rotation.y += 0.005;
      // ref.current.position.y = Math.sin(state.clock.getElapsedTime() * 0.5) * 1;
    }
  });
  return (
    <group
      ref={ref}
      {...props}
      dispose={null}
      position={[0, 0, 0]}
      rotation={[0, Math.PI / 2, 0]}
      scale={2.3}
      onPointerOver={() => setHovering(false)}
      onPointerOut={() => setHovering(true)}
    >
      <group name="RootNode" userData={{ name: "RootNode" }}>
        <mesh
          name="Mailbox"
          castShadow
          receiveShadow
          geometry={nodes.Mailbox.geometry}
          material={materials.Material}
          scale={100}
          userData={{ name: "Mailbox" }}
        />
      </group>
    </group>
  );
}
// eslint-disable-next-line @typescript-eslint/no-unused-expressions
useGLTF.preload;
